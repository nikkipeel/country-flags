{"version":3,"sources":["world.jpg","StyledButton.js","FlagChoices.js","FlagAnswer.js","FlagQuestion.js","CountryGame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledButton","text","onClick","type","style","backgroundColor","borderRadius","border","color","padding","textAlign","textDecoration","fontSize","FlagChoices","props","options","handleChange","handleSubmit","inputs","map","opt","key","id","value","checked","onChange","name","className","onSubmit","FlagAnswer","correct","answer","onNext","QuestionStates","FlagQuestion","state","userChoice","undefined","bind","e","this","setState","Number","target","preventDefault","onGuess","flag","questionState","answerText","opts","output","src","alt","Component","defaultProps","CountryGame","countries","correctOption","nextQuestion","fetch","then","resp","json","Math","floor","random","length","_getOptions","catch","console","warn","tries","option","indexOf","push","shuffle","marginTop","App","backgroundImage","worldImg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0598a89f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/world.41c62db0.jpg\";","import React from 'react';\r\n\r\nconst StyledButton = ({ text, onClick, type }) => (\r\n    <button\r\n        type={type || 'button'}\r\n        onClick={onClick}\r\n        style={{\r\n            backgroundColor: \"#6b93d6\",\r\n            borderRadius: \"4px\",\r\n            border: \"none\",\r\n            color: \"white\",\r\n            padding: \"4px 10px\",\r\n            textAlign: \"center\",\r\n            textDecoration: \"none\",\r\n            fontSize: \"1em\",\r\n        }}\r\n    >\r\n        {text}\r\n    </button>\r\n);\r\n\r\nexport default StyledButton;","import React from 'react';\r\nimport StyledButton from './StyledButton';\r\nimport './FlagChoices.css';\r\n\r\nconst FlagChoices = props => {\r\n    let options = props.options || []\r\n    const { handleChange, handleSubmit } = props;\r\n    let inputs = options.map(opt => (\r\n        <label key={opt.id}>\r\n            <input type=\"radio\"\r\n                value={opt.id}\r\n                checked={opt.checked}\r\n                onChange={handleChange}\r\n                name=\"flag-choice\" />\r\n            {opt.name}\r\n        </label>\r\n    ));\r\n\r\n    return (\r\n        <form className=\"flag-form\" onSubmit={handleSubmit}>\r\n            {inputs}\r\n            <StyledButton text=\"GUESS\" type=\"submit\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FlagChoices;","import React from 'react';\r\nimport StyledButton from \"./StyledButton\";\r\nimport \"./FlagAnswer.css\";\r\n\r\nconst FlagAnswer = ({ correct, answer, onNext }) => (\r\n    <div className=\"flag-answer\">\r\n        {correct ?\r\n            `Correct!: ${answer}` :\r\n            `Incorrect! Correct Answer: ${answer}`}\r\n        <StyledButton text=\"NEXT\" onClick={onNext} />\r\n    </div>\r\n);\r\n\r\nexport default FlagAnswer;","import React, { Component } from 'react';\r\nimport FlagChoices from \"./FlagChoices\";\r\nimport FlagAnswer from \"./FlagAnswer\";\r\nimport \"./FlagQuestion.css\";\r\n\r\nconst QuestionStates = {\r\n    QUESTION: 1,\r\n    ANSWER_WRONG: 2,\r\n    ANSWER_CORRECT: 3\r\n};\r\n\r\nclass FlagQuestion extends Component {\r\n    static defaultProps = {\r\n        options: []\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userChoice: undefined,\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ userChoice: Number(e.target.value) });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onGuess(this.state.userChoice);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            flag,\r\n            questionState,\r\n            options,\r\n            answerText,\r\n            onNext\r\n        } = this.props;\r\n        const { userChoice } = this.state;\r\n        let opts = options.map(opt => ({\r\n            ...opt,\r\n            checked: userChoice === opt.id\r\n        }));\r\n        let output = questionState === QuestionStates.QUESTION ?\r\n            (<FlagChoices handleChange={this.handleChange}\r\n                handleSubmit={this.handleSubmit}\r\n                options={opts} />) :\r\n            (<FlagAnswer\r\n                correct={questionState === QuestionStates.ANSWER_CORRECT}\r\n                answer={answerText}\r\n                onNext={onNext} />);\r\n\r\n        return (\r\n            <div>\r\n                {output}\r\n                <img\r\n                    className=\"flag-img\"\r\n                    src={flag}\r\n                    alt=\"Guess the flag\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FlagQuestion;\r\nexport { QuestionStates };","import React, { Component } from 'react';\r\nimport FlagQuestion, { QuestionStates } from \"./FlagQuestion.js\";\r\nimport shuffle from 'shuffle-array';\r\n\r\nclass CountryGame extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            countries: [],\r\n            options: [],\r\n            correctOption: undefined,\r\n            questionState: undefined,\r\n        }\r\n\r\n        this.onGuess = this.onGuess.bind(this);\r\n        this.nextQuestion = this.nextQuestion.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"https://restcountries.eu/rest/v2/all\")\r\n            .then(resp => resp.json())\r\n            .then(countries => {\r\n                const correctOption = Math.floor(Math.random() * countries.length);\r\n                const options = this._getOptions(correctOption, countries);\r\n                this.setState({\r\n                    countries,\r\n                    correctOption,\r\n                    options,\r\n                    questionState: QuestionStates.QUESTION,\r\n                });\r\n            })\r\n            .catch(console.warn)\r\n    }\r\n\r\n    onGuess(answer) {\r\n        const { correctOption } = this.state;\r\n        let questionState = answer === correctOption ?\r\n            QuestionStates.ANSWER_CORRECT :\r\n            QuestionStates.ANSWER_WRONG;\r\n        this.setState({ questionState });\r\n    }\r\n\r\n    nextQuestion() {\r\n        const { countries } = this.state;\r\n        const correctOption = Math.floor(Math.random() * countries.length);\r\n        const options = this._getOptions(correctOption, countries);\r\n        this.setState({\r\n            correctOption,\r\n            options,\r\n            questionState: QuestionStates.QUESTION\r\n        });\r\n    }\r\n\r\n    _getOptions(correctOption, countries) {\r\n        let options = [correctOption];\r\n        let tries = 0;\r\n        while (options.length < 4 && tries < 15) {\r\n            let option = Math.floor(Math.random() * countries.length);\r\n            if (options.indexOf(option) === -1) {\r\n                options.push(option);\r\n            } else {\r\n                tries++;\r\n            }\r\n        }\r\n        return shuffle(options);\r\n    }\r\n\r\n    render() {\r\n        let {\r\n            countries,\r\n            correctOption,\r\n            options,\r\n            questionState\r\n        } = this.state;\r\n        let output = <div>Loading...</div>;\r\n        if (correctOption !== undefined) {\r\n            const { flag, name } = countries[correctOption];\r\n            let opts = options.map(opt => {\r\n                return {\r\n                    id: opt,\r\n                    name: countries[opt].name\r\n                };\r\n            });\r\n            output = (\r\n                <FlagQuestion\r\n                    answerText={name}\r\n                    onGuess={this.onGuess}\r\n                    onNext={this.nextQuestion}\r\n                    options={opts}\r\n                    questionState={questionState}\r\n                    flag={flag}\r\n                />\r\n            );\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '15px' }}>\r\n                {output}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryGame;\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport CountryGame from \"./CountryGame\";\r\nimport worldImg from \"./world.jpg\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"flag-app\">\r\n                <header\r\n                    className=\"title-header\"\r\n                    style={{ backgroundImage: `url(${worldImg})` }}>\r\n                    <h1 className=\"title-text\">Guess The Flag</h1>\r\n                </header >\r\n                <CountryGame />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\nserviceWorker.unregister();\n"],"sourceRoot":""}